using System;
using System.Net;
using System.Net.Sockets;
using System.Text;

namespace Learning
{
    internal class Program
    {
        /*
         * Протоколы TCP & UDP
         * 
         * TCP Обеспечивает то что будет 100% доставлен ответ и запрос, 
         * он будет посылать запрос пока не получит подтверждение что запрос был получен 
         * и что не привысит количество отправляемых запросов,
         * когда ответ будет получен вот тогда он отправит новый запрос, если он не получил ответа он будет посылать этот запрос ещё раз и ещё раз,
         * если n-количество раз не удалось он выдает ошибку "Сбой соединения". Минус - Медленный (Уходит время на установку соединения)
         * 
         * UDP Не гарантирует доставку. Плюсы - Более быстрый, более легкий за счёт этого хорошо работает широковещательная реализация (Когда нам нужно оповестить большое количество клиентов)
         * 
         * В каких случаях используется TCP и в каких UDP
         * Пример с TCP: Если у тебя идет работа с сайтом тут используется протокол TCP
         * ты гарантировано получиш доступ к сайту, если не получиш, сайт отвалится по таймауту.
         * 
         * Пример с UDP: Для стримингового вещания, твой компьютер транслирует поток видео данных, 
         * клиенты могут подключатся и получать видео поток в прямом эфире но могут быть прерывания (Теряются пакеты).
         * 
         * Если тебе нужно точная гарантированная доставка пакетов нужно использовать TCP.
         * Если у тебя большое количество клиентов до нужно использовать UDP.
        */
        public static void Main(string[] args) // Сервер
        {
            // Установить конкретный адресс пути
            const string IP = "127.0.0.1"; // Локальная машина (IP version 4.0)
            const int PORT = 8080; // Порт

            var tcpEndPoint = new IPEndPoint(IPAddress.Parse(IP), PORT); // Конечная Точка подключения

            #region Tcp Socket который находится в режиме ожидания, ожидает приема сообщения.
            var tcpSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp); // Сокет (Дверка в которую можно заходить) Через которую будет проводится соединение
            tcpSocket.Bind(tcpEndPoint); // Перевести сокет в режим ожидания, указать ему конкретный порт что нужно слушать этому сокету конкретный этот порт.
            tcpSocket.Listen(5); // Запуск сокета на прослушивание, где 5, это очереди то есть выстроится очередь в размер 5 клиентов. Установилось соединение клиент общается, уходит, подключается другой.
            #endregion


            while (true) // Бесконечное прослушивание, будет выполнение обрабатывание этого конкретного клиента. Клиент пришёл listener был создан, данные обработали получили ответ, уничтожили, и создаем новый.
            {
                var listener = tcpSocket.Accept(); // Создание подключения конкретного клиента 
                var buffer = new byte[256]; // Буфер, куда будем принимать данные, где 256 это максимальное количество принимаемых байт.
                var size = 0; // Количество реальных полученных байт.
                var data = new StringBuilder(); // StringBuilder позволяет удобно форматировать данные.

                do
                {
                    size = listener.Receive(buffer); // Получение байтов и помещение их в size.
                    data.Append(Encoding.UTF8.GetString(buffer, 0, size)); // Мы берем и из большого сообщения (listener) и мы эту строку из 256 символов берем перекодировали добавили в итогувую строку.

                } while (listener.Available > 0); // Если количество созданных конкретных подключений клиента будет > 0 будет повторятся цикл.

                Console.WriteLine(data); // Вывод данных
                                         // TODO: Проверить .ToString()

                listener.Send(Encoding.UTF8.GetBytes("Успех!"));

                listener.Shutdown(SocketShutdown.Both); // Двух стороннее закрытие, закрываем у клиента и у сервера.
                listener.Close(); // Закрыть
            }
            // Console.ReadLine();
        }
    }
}
